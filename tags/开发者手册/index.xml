<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发者手册 on Yizhou</title>
    <link>https://wuyizhou.com/tags/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/</link>
    <description>Recent content in 开发者手册 on Yizhou</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Apr 2022 01:52:54 +0000</lastBuildDate>
    <atom:link href="https://wuyizhou.com/tags/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端的技术栈理解</title>
      <link>https://wuyizhou.com/posts/frontend-terms/</link>
      <pubDate>Fri, 22 Apr 2022 01:52:54 +0000</pubDate>
      <guid>https://wuyizhou.com/posts/frontend-terms/</guid>
      <description>最近几年单页应用程序发展非常迅速，从早期通过Javascript写入大量html模版去做单页程序（SPA），到现在的React、Vue（最为流行），但不得不说，前端的技术进步太快了，稍不关注技术，就会出来很多的新的技术。
但归根结底，每次新的技术出来，埋头深入发现远比想象的复杂，而到了一定的时间后则能够想明白一些事情，这也就是&amp;quot;深入浅出&amp;quot;的道理。 单页应用是一个复杂的技术，要解决这些问题，出现了很多&amp;quot;框架&amp;quot;、工具，比如React、Vue、React-router、Redux等。对于新手来说更是学了一圈后出来也是懵的。但总体来说，React和Vue这类库本质都没有什么区别，都是为了解决SPA提出的方案。这类库大部分主要的理念是将Web应用划分为一个一个的组件为单元，这些组件可以包含另一个组件，以此来达到复用性。
而每个组件不可能都显示一样，那这样复用性是没有意义的。 那这个时候提出了“状态”的概念，来让每个复用的组件显示不同的内容，状态分为了props和state，props是由外部传入进来的状态，state则是组件内部自己的状态。而这类UI库对于状态的变化，都会根据一些优秀的算法去重新渲染组件，并且渲染的时候仅仅涉及到改变的那一部分内容。
之所以需要状态，其实告诉React这类库需要监听哪些值，方便在改变这些值的时候，React可以及时的进行计算和重新渲染组件。 比如下面的代码就可以通过传递name值进行重复使用包含&amp;lt;h2&amp;gt;标签的组件，这种方式传递的状态在内部就是使用props获取。
&amp;lt;Header name=&amp;#39;hello&amp;#39;&amp;gt; // 输出：&amp;lt;h2&amp;gt;Hello&amp;lt;/h2&amp;gt; &amp;lt;Header name=&amp;#39;world&amp;#39;&amp;gt; // 输出：&amp;lt;h2&amp;gt;world&amp;lt;/h2&amp;gt; 而state则更多用于组件内部，比如当你鼠标点击需要获取一个报价，这个时候组件内部会发起一个请求，从服务器获取到报价后返回，改变状态，UI库进行重新渲染，这个时候就能获取到报价。 虽然说React提供了这些方便的功能，也提倡组件化和重复使用，但很多的组件是需要自己去一个一个写的。那这个时候，就有很多个人、组织开发出了&amp;quot;组件库&amp;quot;，&amp;ldquo;组件库&amp;quot;中包含了很多已经开发好可复用的组件，可以直接通过调用直接使用，这就是我们为什么看见除了React还有Ant Design、MaterialUI库。
介绍完UI库和组件库后，单页应用还差一个东西，就是路由功能，路由也可以通过简单的Javascript来判断，比如当点击了一个链接后，Javascript将当前页面内容清除（隐藏），然后再渲染点击的目标内容。但是这个时候有一些问题，比如需要编写大量的代码、丢失浏览器的前进后退、没有办法收藏等问题（后面两个问题可以再通过增加代码去解决）。所以React-router-dom`这类的库就出现了，把所有的底层的逻辑和代码都进行封装提供一些接口，即大部分的人不需要再编写、理解这类的代码直接可以开箱即用，这也就是这类路由库出现的原因。 我们从前面了解到了状态分别为props和state，一个是外部，一个是内部的。
那这个时候如果组件的嵌套过于&amp;quot;多层次&amp;quot;了后，比如从顶层的组件需要传递一个状态到第N层的组件中，那么每一层即使不需要不处理也要将状态进行传递，那这个时候涉及到的组件其中会包含非常多的和组件无关的代码。 所以这个时候需要一个通用的状态管理的解决方案（如Redux），让整个Web应用都共享一个大的状态，需要多层传递的状态则可以放在这个大状态内部，让不关心有些状态的组件不用去关心无关状态，而有些状态的组件去关心自己关心的状态。
Redux本身设计是非常有趣的，整个应用的状态不能直接修改，这是因为如果大家都直接修改很有可能会造成状态的管理的混乱，所以Redux的修改状态流程是组件发起动作-&amp;gt;Dispatch函数接收动作-&amp;gt;reducer处理动作-&amp;gt;影响状态-&amp;gt;重新渲染组件。</description>
    </item>
    <item>
      <title>Python数据集合</title>
      <link>https://wuyizhou.com/posts/python-list/</link>
      <pubDate>Mon, 25 Jun 2018 13:21:31 +0000</pubDate>
      <guid>https://wuyizhou.com/posts/python-list/</guid>
      <description>列表 列表是有序可变的数据集合，并且一对[]来表示这是一个列表，元素之间逗号分隔，每个数据之间有逗号分隔，列表基本上可以包含很多数据类型，下面就是一个典型的列表：
list = [1,2.2,&amp;#39;ok&amp;#39;,bool] 在上面的列表中存储了数据(整型、浮点型、字符串、布尔值)，包含我们下面看见的几种集合类型都是可以当作列表的子元素的。
当然也可以从列表中取出数据，因为列表是有序的，所以我们可以通过索引从0开始进行取数据,你需要注意的是所有可以用索引进行得到值的都是从0开始，比如下面的代码取出了列表第一个和第三个数据。
list = [1,2.2,&amp;#39;ok&amp;#39;,bool] list[0] # 1 list[2] # &amp;#39;ok&amp;#39; 除了0开始的整数，还可以用负数，比如-1表示倒数第一个值，-2表示倒数第二个值，以此类推。
list = [1,2.2,&amp;#39;ok&amp;#39;,bool] list[-1] # bool list[-2] # &amp;#39;ok&amp;#39; 列表切片 除此之外，列表还支持切片的功能，就相当于一块肉，我们通过菜刀把这块肉切成一片一片的，方便我们炒菜（方便处理）。切片同样和索引一样存在列表变量名后的[]里面，大概语法如下：
list[起始位置:截至位置(但不包括本位置的值):步数] 下面的代码我获取了从第一个到第四个的值（但不包括第四个值）：
list = [1,2.2,&amp;#39;ok&amp;#39;,bool] list[0:3] # 1,2.2,&amp;#39;ok&amp;#39; 也可以设置步数，作用就是比如我们设置2，就会每隔两个值就返回一个值：
list = [1,2.2,&amp;#39;ok&amp;#39;,bool] list[0:4:1] #[1, &amp;#39;ok&amp;#39;] 当然同样可以设置负数，可以自行测试！
列表查询 列表查询可以用于判断一个值是否在列表当中，通过in和not in来进行，其中in表示一个值是否包含在列表当中，如果包含则返回True，反之返回False，而not in则是对in的结果进行取反，比如下面的代码则表示了判断值2.2是不是存在于列表当中以及对in结果进行取反。
list = [1,2.2,&amp;#39;ok&amp;#39;,bool] print(2.2 in list) #返回 True print(2.2 not in list) #返回False 元组 元组是有序不可变的数据集合，并且用一对()来进行表示，元素之间逗号分隔，当你定义好元组那一刻，元组里面的所有数据就不能够进行修改了，你只能读取里面的数据而无法修改和添加数据，比如下面，我定义了一组元组后，我通过修改第一个元素产生错误：
tple = (1,2,3,4) tple[0] # 1 tple[0] = &amp;#39;m&amp;#39; &amp;#34;&amp;#34;&amp;#34; Traceback (most recent call last): File &amp;#34;&amp;lt;ipython-input-21-cae8ab2b1ade&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; tple[0] = m TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment 在上面这一行就会明显提醒你tuple对象不支持修改。 &amp;#34;&amp;#34;&amp;#34; 集合 集合是可变无序的数据集合，并且用一对{}表示，元素之间逗号分隔，还需要特别注意的是集合是一个包含唯一元素的可变无序集合数据类型,集合的一个用途是快速删除列表中的重复项 ，集合是无序的，既然是无序那么就没有办法进行索引，我们只能通过两个方法进行添加和删除数据并返回，添加通过add()方法，删除是pop()方法，添加是随机插入到集合当中的任何位置，而删除是从集合当中随机取出一个值删除并返回。比如下面的操作：</description>
    </item>
    <item>
      <title>Python数据类型与操作符</title>
      <link>https://wuyizhou.com/posts/python-datatype/</link>
      <pubDate>Mon, 25 Jun 2018 09:26:05 +0000</pubDate>
      <guid>https://wuyizhou.com/posts/python-datatype/</guid>
      <description>算术运算符 + 加 - 减 * 乘 / 除 % 取余（相除后的余数） ** 取幂（注意 ^ 并不执行该运算，你可能在其他语言中见过这种情形） // 相除后向下取整到最接近的整数 整数、浮点数 数字值可以用到两种 python 数据类型：
int - 表示整数值 float - 表示小数或浮点数值 你可以通过以下语法创建具有某个数据类型的值：
x = int(4.7) # x is now an integer 4 y = float(4) # y is now a float of 4.0 你可以使用函数 type 检查数据类型：
&amp;gt;&amp;gt;&amp;gt; print(type(x)) int &amp;gt;&amp;gt;&amp;gt; print(type(y)) float 布尔型运算符、比较运算符和逻辑运算符 布尔数据类型存储的是值 True 或 False，通常分别表示为 1 或 0。
通常有 6 个比较运算符会获得布尔值：
比较运算符 符号使用情况</description>
    </item>
  </channel>
</rss>

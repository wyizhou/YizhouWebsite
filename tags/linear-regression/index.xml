<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linear Regression on Lucas Wu</title>
    <link>https://vec6.com/tags/linear-regression/</link>
    <description>Recent content in Linear Regression on Lucas Wu</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 27 Jan 2025 10:53:34 +0000</lastBuildDate>
    <atom:link href="https://vec6.com/tags/linear-regression/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ridge回归</title>
      <link>https://vec6.com/blog/ridgereg/</link>
      <pubDate>Mon, 27 Jan 2025 10:53:34 +0000</pubDate>
      <guid>https://vec6.com/blog/ridgereg/</guid>
      <description>&lt;p&gt;Ridge回归简单的来讲，是用于解决算法解释数据的时候，数据中特征高度相关（多重共线性）导致的过拟合，即完美拟合训练数据，无法很好的预测新数据，这是因为把训练数据的噪音也学习了，Ridge原理是在回归的基础上增加了一个“惩罚项”，让模型不要依赖某些变量。&lt;/p&gt;&#xA;&lt;p&gt;比如预测房价的例子，现在有面积、房间数量、地理位置和朝向等特征，其中面积和房间数量就是高度相关的变量，因为面积大了，房间数量也一定会增加，所以当把面积（X1）和房间数量（X2）输入给算法，模型则有可能出现X1系数很大，X2系数很小，或者反过来的情况，导致模型解释能力变差，回归系数也无法稳定，主要是因为无法知道其中X1和X2对于模型的贡献情况，就好比两个员工一起做事，交付了后，老板无法评估这个成果每个人付贡献谁更大。&lt;/p&gt;&#xA;&lt;p&gt;Ridge回归目标函数为，这个回归函数为要解决的问题的数学公式（理论解）：&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;\min_{\beta} \sum_{i=1}^{n} (y_i - \hat{y}i)^2 + \alpha \sum{j=1}^{p} \beta_j^2&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;而将上述目标函数推导为矩阵公式后，得到如下矩阵公式（解析解），为什么要推导？这是因为Ridge回归的目标函数是一个数学表达式，是一个理论解，而解析解（即推导后的公式）则是一个计算机可以直接求解的矩阵公式。&lt;/p&gt;&#xA;&lt;p&gt;这个公式实际上对比最小二乘法解系数的公式中添加了正则项，也就是通过增大a达到增大分母的作用，让整体系数变小，同时越大的系数，就会惩罚越大。&#xA;$$&#xA;\beta = (X^T X + \alpha I)^{-1} X^T Y&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>多次多项式回归</title>
      <link>https://vec6.com/blog/multiplepolynomialregression/</link>
      <pubDate>Sat, 11 Jan 2025 23:53:34 +0000</pubDate>
      <guid>https://vec6.com/blog/multiplepolynomialregression/</guid>
      <description>&lt;p&gt;线性回归的核心是描述直线关系，适用于变量间的简单线性关系，而多次多项式回归则赋予模型描述非线性的回归模型（比如曲线以及更复杂的曲线），它本质上是在线性回归基础上扩展的，增加模型的灵活性，更好的拟合非线性的数据趋势，多次多项式根据需要拟合的数据趋势要求不同，可以进行包含一次、两次、三次等多项式的回归，而每次增加次项，则会增加线条的波动能力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;多项式回归&#34;&gt;多项式回归&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;一次多项式&lt;/strong&gt;（线性回归）&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;作用：a0，决定了线条的“斜率”，描述x增加时，y的线性变化。&lt;/li&gt;&#xA;&lt;li&gt;特性：斜率是均匀的，整个线条是直的。&lt;/li&gt;&#xA;&lt;li&gt;适用场景：适合于简单的线性增长或者减少。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;二次多项式&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;作用：a1x决定了线条是否“弯曲”，即呈现出正U(a2 &amp;gt; 0)或者倒U(a2 &amp;lt; 0)的形状&lt;/li&gt;&#xA;&lt;li&gt;特性：解释数据中整体的加速或减速的趋势，比如汽车加速（a2 &amp;gt; 0 ），速度逐渐变快。&lt;/li&gt;&#xA;&lt;li&gt;适用场景：适用于简单非线性趋势。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;三次及以上的多项式&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;作用：a2x^2决定了线条的“波动”能力，描述线条的多个拐点。&lt;/li&gt;&#xA;&lt;li&gt;特性：增加了对于细节的捕捉能力，允许在数据中不同区域出现不同趋势&lt;/li&gt;&#xA;&lt;li&gt;适用场景：复杂的非线性趋势。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在使用多项式回归的时候，需要根据数据的特性，优先选择低阶多项式，如果数据趋势较为负责，可以逐步增加项式，但需要注意的是过高的项次会导致曲线过渡的贴合每个数据，导致模型预测的时候无法泛化到新数据，即过拟合。&lt;/p&gt;&#xA;&lt;p&gt;多次多项式公式为：&#xA;$$&#xA;y = a_0 + a_1x + a_2x^2 + a_3x^3 + \dots + a_nx^n&#xA;$$&#xA;&lt;strong&gt;公式的每部分含义：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;y：目标变量（预测值）。&lt;/li&gt;&#xA;&lt;li&gt;x：自变量（输入值）。&lt;/li&gt;&#xA;&lt;li&gt;$a_0,$ $a_1$, $a_2$, …：系数（模型需要学习的权重）。&lt;/li&gt;&#xA;&lt;li&gt;$x^2,$ $x^3$ …, $x^n$：自变量的高次项，用于拟合非线性数据。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;下面通过一个外卖的例子来说明一次多项式、二次多项式以及三次多项式的不同之处：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;距离（公里,自变量x）&lt;/th&gt;&#xA;          &lt;th&gt;配送时间（分钟，因变量y）&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;15&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;20&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;35&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;70&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;观测数据方面，可以明显看见数据是非线性增长，即距离越远，配送时间越长，所以使用线性回归（即一次多项式）来拟合数据，会出现部分特征无法拟合，下面用不同的多项式来拟合数据。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一次多项式回归&#34;&gt;一次多项式回归&lt;/h3&gt;&#xA;&lt;p&gt;一次多项式回归，即线性回归，公式为：&#xA;$$&#xA;y = a * x + b&#xA;$$&#xA;结合数据做简单的平均变化法可以得斜率（系数）a，公式：&#xA;$$&#xA;a = (70 - 10) / (5 - 1) = 15&#xA;$$&#xA;再算出截率b：&#xA;$$&#xA;10 = 15 * 1 + a1 \newline&#xA;等于 \newline&#xA;a1 = -5&#xA;$$&#xA;最终预测公式为：&#xA;$$&#xA;y = 15 * x + (-5)&#xA;$$&#xA;当距离为3公里的时候，预测为40分钟。&lt;/p&gt;</description>
    </item>
    <item>
      <title>线性回归</title>
      <link>https://vec6.com/blog/linearreg/</link>
      <pubDate>Sat, 11 Jan 2025 23:53:34 +0000</pubDate>
      <guid>https://vec6.com/blog/linearreg/</guid>
      <description>&lt;h2 id=&#34;简单线性回归&#34;&gt;简单线性回归&lt;/h2&gt;&#xA;&lt;p&gt;线性回归是用来找到两个变量之间关系的方法，它试图找到一个“最佳线路”（即拟合），表示当自变量变化的时候，因变量如何变化，线性回归的公式为如下：&#xA;$$&#xA;y = a \cdot x + b&#xA;$$&#xA;其变量的解释为：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;y：因变量，也是输出或者预测值。&lt;/li&gt;&#xA;&lt;li&gt;x：自变量，也是输入。&lt;/li&gt;&#xA;&lt;li&gt;a：为斜率，表示x自变量每增加1，y会增加或者减少多少。&lt;/li&gt;&#xA;&lt;li&gt;b：为截距，表示当x=0的时候，y的值。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;线性回归可以简单理解为找到一条最能反应数据点总体趋势的数学表达式（比如直线），比如在散点图中，画一条尽可能靠近所有点的直线，而在这条线中，截距b表示直线在y轴上的起点，在当x增加时，直线沿着斜率a的方向延长，延长后的值即为y值。&lt;/p&gt;&#xA;&lt;p&gt;举一个生活中的例子，通过距离长短（自变量，即x）预测时间（因变量, 即y）的时长：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;送货距离(km)&lt;/th&gt;&#xA;          &lt;th&gt;送货时间(min)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;15&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;20&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;25&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;35&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;通过上述的数据，可以知道当送货距离每增加1公里的时候，送货时间增加5分钟，所以在送货距离为2的时候，公式为：&#xA;$$&#xA;15 = a \cdot 2 + b&#xA;$$&#xA;计算斜率a有很多方法，具体取决于解决的问题背景、数据特性等，这里采用简单的“&lt;strong&gt;平均变化法&lt;/strong&gt;”来计算斜率a，“&lt;strong&gt;平均变化法&lt;/strong&gt;”的思路就是选择数据中任意的两个点来估算斜率a，公式为：&#xA;$$&#xA;a = \frac{\Delta y}{\Delta x_1}&#xA;$$&#xA;举例的数据中，取抽取第一个点和最后一个点来计算斜率a为（不一定要用最后一个点和第一个点，取具备代表的两个点即可）：&#xA;$$&#xA;(35 - 10) / (5 - 1)  = 6.25&#xA;$$&#xA;这个时候将斜率带入线性回归的公式中：&#xA;$$&#xA;15 = 6.25 \cdot 2 + b&#xA;$$&#xA;然后通过公式计算出截率b为2.5，因此公式为：&#xA;$$&#xA;b = y - a \cdot x \newline&#xA;b = 15 - 6.25 \cdot 2  = 2.5&#xA;$$&#xA;最后我们就得到了一个预测模型，当我们输入x的时候，就会预测出y的值：&#xA;$$&#xA;y = 6.25 \cdot x + 2.5&#xA;$$&#xA;通过这个模型可以进行计算当距离达到了3KM的时候，预测出来的送货时间为21.25分钟：&#xA;$$&#xA;6.25 \cdot 3 + 2.5  = 21.25&#xA;$$&#xA;需要注意的是模型并不会精准的预测出在上述数据表中对应的值，因为拟合的直线是代表的整体的趋势，在实际的数据中拟合的直线也不会穿过每个数据点，所以更多的时候是考虑了所有数据点的情况去拟合一条合适的直线，所以预测的是有偏差的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
